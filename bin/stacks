#!/opt/ruby-bundle/bin/ruby

$LOAD_PATH << '/usr/local/lib/site_ruby/timgroup/'

require 'getoptlong'

require 'stackbuilder/stacks/factory'
require 'stackbuilder/support/logger'

$options = {
  :environment => 'dev',
  :path        => ENV['STACKBUILDER_CONFIG_PATH'] || '/etc/stacks',
  :verbose     => 1
}

# options with arguments go straight into $options
# unknown options are to be ignored
GetoptLong.new(
  ['--environment', '-e', GetoptLong::REQUIRED_ARGUMENT],
  ['--path',        '-p', GetoptLong::REQUIRED_ARGUMENT],
  ['--stack',       '-s', GetoptLong::REQUIRED_ARGUMENT],
  ['--verbose',     '-v', GetoptLong::NO_ARGUMENT],
  ['--terse',       '-t', GetoptLong::NO_ARGUMENT]
).each do |opt, arg|
  opt_sym = opt[2..-1].to_sym
  case opt
  when '--verbose'
    $options[opt_sym] += 1
  when '--terse'
    $options[opt_sym] = true
  else
    $options[opt_sym] = arg
  end
end
cmd = ARGV.shift
argv = ARGV
logger(Logger::DEBUG) { "finished processing options. command: \"#{cmd}\", options: \"#{$options}\", argv: #{argv}" }

logger(Logger::DEBUG) { 'initializing $factory' }
$factory = Stacks::Factory.new
if ($environment = $factory.inventory.find_environment($options[:environment])).nil?
  logger(Logger::ERROR) { "environment \"#{$options[:environment]}\" not found" }
  exit 1
end
logger(Logger::DEBUG) { "environment \"#{$environment.name}\" has #{$environment.definitions.count} definitions" }

logger(Logger::DEBUG) { "about to execute command \"#{cmd}\"" }
case cmd
when 'audit'
  require 'stackbuilder/support/cmd_audit'
  logger(Logger::DEBUG) { ":primary_site for \"#{$environment.name}\" is \"#{$environment.options[:primary_site]}\"" }

  CMDAudit.audit($environment.options[:primary_site])
when 'dump_enc'
  require 'stackbuilder/support/zamls'
  $factory.inventory.environments.sort.each do |envname, env|
    next if envname == 'lon' # XXX 15.07.15 mmazurek/scarytom: special case 'lon' until it's fixed
    env.flatten.sort { |a, b| a.hostname + a.domain <=> b.hostname + b.domain }.each do |stack|
      puts "running to_enc on #{stack.hostname}.#{stack.domain}/#{envname}:"
      puts ZAMLS.to_zamls(stack.to_enc)
    end
  end
when 'dump_spec'
  require 'stackbuilder/support/zamls'
  $factory.inventory.environments.sort.each do |envname, env|
    next if envname == 'lon' # XXX 15.07.15 mmazurek/scarytom: special case 'lon' until it's fixed
    env.flatten.sort { |a, b| a.hostname + a.domain <=> b.hostname + b.domain }.each do |stack|
      puts "running to_spec on #{stack.hostname}.#{stack.domain}/#{envname}:"
      puts ZAMLS.to_zamls(stack.to_spec)
    end
  end
when 'find_rogue'
  # find inconsistency between stackbuilder-config and reality
  require 'stackbuilder/support/cmd_find_rogue'
  defined_hostnames, _defined_machines = CMDFindRogue.get_defined_machines(environment)
  allocated_hostnames, _allocated_domains, _allocated_storage = CMDFindRogue.get_allocated_machines(%w(oy pg st ci))

  CMDFindRogue.rogue_check_allocation(defined_hostnames, allocated_hostnames)
  # rogue_check_resources(defined_machines, allocated_domains)
  # rogue_check_missing_storage(defined_machines, allocated_storage, allocated_hostnames)
when 'ls'
  require 'stackbuilder/support/cmd_ls'
  CMDLs.ls
when 'enc'
  require 'stackbuilder/support/cmd_enc'
  CMDEnc.enc(argv)
when 'spec'
when 'vip_spec'
when 'orc'
when 'puppet'
  require 'stackbuilder/support/cmd_puppet'
  CMDPuppet.puppet(argv)
else
  logger(Logger::FATAL) { "invalid command \"#{cmd}\"" }
  exit 1
end

logger(Logger::DEBUG) { 'exiting gracefuly' }
